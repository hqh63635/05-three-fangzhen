// import { CSG } from 'three-csg-ts';

// // 创建一个父 Group 用于容纳形状

// let group;
// group = new THREE.Group();
// group.position.y = 50;
// scene.add(group);

// const arcShape = new THREE.Shape()
//   .moveTo(50, 10)
//   .absarc(10, 10, 40, 0, Math.PI, true);

// const smileyMouthPath = new THREE.Path()
//   .moveTo(50, 10)

//   .absarc(10, 10, 20, 0, Math.PI, true) // 绘制半圆形
//   ; // 封闭路径
// ;

// // 然后可以将 customPath 作为形状的路径，进行进一步的操作或呈现为几何体

// const holePath = new THREE.Path()
//   .absarc(10, 10, 20, 0, Math.PI * 2, true);


// arcShape.holes.push(smileyMouthPath);
// const extrudeSettings = { depth: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };
// addShape(arcShape, extrudeSettings, 0x00f000, 120, 250, 0, 0, 0, 0, 3);

// function addShape(shape, extrudeSettings, color, x, y, z, rx, ry, rz, s) {

//   // flat shape with texture
//   // note: default UVs generated by THREE.ShapeGeometry are simply the x- and y-coordinates of the vertices

//   let geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);

//   let mesh = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial({ color: color }));
//   mesh.position.set(x, y, z - 75);
//   mesh.rotation.set(rx, ry, rz);
//   mesh.scale.set(s, s, s);
//   group.add(mesh);
// }